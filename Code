//!!AUM!!
#include <avr/pgmspace.h>
#include <Adafruit_Fingerprint.h>
#include <LiquidCrystal.h> 
// RS-7  ; EN-6 ; D4-5    ;  D5-4   ; D6-3    ; D7-2
LiquidCrystal lcd(2, 3, 4, 5, 6, 7);

#define KEY_1           A0
#define KEY_2           A1 
#define KEY_3           A2
#define KEY_4           A3
#define IR_DATA1        A4
#define IR_DATA2        A5
#define IR_DATA3        A6
#define IR_DATA4        A7

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&Serial2); //finger_print module

#define MAX_PERSON    8

uint8_t id;

int crnt_match_point = 0;
char browser_LinkID = 0,App_LinkID = 0; 
char AppContDataSending = 0;
int ContSending_timer = 0;

int base_ms = 0;
byte LocationID = 0,in_out = 0;

  

void setup() 
{  // put your setup code here, to run once:
  Serial1.begin(115200);     //WIFI
  Serial.begin(9600);     //WIFI

  pinMode(KEY_1,INPUT_PULLUP);
  pinMode(KEY_2,INPUT_PULLUP);
  pinMode(KEY_3,INPUT_PULLUP);
  pinMode(KEY_4,INPUT_PULLUP);
  pinMode(IR_DATA1,INPUT);
  pinMode(IR_DATA2,INPUT);
  pinMode(IR_DATA3,INPUT);
  pinMode(IR_DATA4,INPUT);
  
  lcd.begin(16, 2);
  lcd.setCursor(0, 0);
  lcd.print(" CHILD SECURITY ");    
  lcd.setCursor(0, 1);
  lcd.print("                ");  
  delay(5000);

  // set the data rate for the sensor serial port
  finger.begin(57600);
  if (!finger.verifyPassword()) 
  {  lcd.setCursor(0, 1);
     lcd.print("FP SENSOR ERROR "); 
     delay(5000);
  }
  
  if(!AT_test())   
  { Serial.println(F("Check ESP Module and Restart Arduino"));
    lcd.setCursor(0, 1);
    lcd.print("WIFI MODULE ERR ");  
    delay(5000);
  }

  if(!Client_setup()) 
  { Serial.println(F("Server Not Setup"));
    lcd.setCursor(0, 1);
    lcd.print("CONNECTION ERROR");
    delay(5000);
  }  
}

byte check_attendance = 0,Matched_Id = 0;

void loop() 
{ // put your main code here, to run repeatedly:
  GET_NEW_DATA(); 
  if(!digitalRead(KEY_1))        Fp_register();
  if(!digitalRead(KEY_2))
  { check_attendance = 0;   
    delay(500);
  }  
  if(!digitalRead(KEY_3))
  { check_attendance = 1;   
    delay(500);
  }  
  if(!digitalRead(KEY_4))
  { check_attendance = 2;  
    delay(500);
  }  
  
  delay(1);
  base_ms++;
  if(base_ms < 1000)  return;
  base_ms = 0;

  if(check_attendance == 0)
  { lcd.setCursor(0, 0);
    lcd.print(" CHILD SECURITY ");    
    lcd.setCursor(0, 1);
    lcd.print("                ");  
  }
  if(check_attendance == 1)
  { lcd.setCursor(0, 0);
    lcd.print("MARK ATTENDANCE "); 
    lcd.setCursor(0, 1);
    lcd.print("HomeToSchool,L  ");  
  }
  if(check_attendance == 2)
  { lcd.setCursor(0, 0);
    lcd.print("MARK ATTENDANCE ");  
    lcd.setCursor(0, 1);
    lcd.print("SchoolToHome,L  ");  
  }
  
  if(check_attendance > 0) 
  { lcd.setCursor(14, 1);
    LocationID = IR_DATA();
    if((LocationID > 0)&&(LocationID < 7))    lcd.print(LocationID);
    else
    { lcd.print('I');
      LocationID = 0;
    }
    check_for_attendance();
  }
}

unsigned char IR_DATA(void)
{ unsigned char rx_data = 0;
  if(digitalRead(IR_DATA1) == 0) rx_data |= 0x01;
  if(digitalRead(IR_DATA2) == 0) rx_data |= 0x02;
  if(digitalRead(IR_DATA3) == 0) rx_data |= 0x04;
  if(digitalRead(IR_DATA4) == 0) rx_data |= 0x08;
  return(rx_data);
}

//------Finger Print Code--------------------------------
int check_for_attendance(void)
{ 
  int p = finger.getImage();
  if (p == FINGERPRINT_NOFINGER)  return p;
  char student_match_id = 0;
  char  i = 0,id_number = 0;
//--------------------------------------------------------------------------------
  p = finger.image2Tz(2);
//---------------------------------------------------------------
  for(i = 1;i<=MAX_PERSON;i++)
  { p = finger.loadModel(i);
    p = finger.createModel();
    if(p == FINGERPRINT_OK)
    { id_number = i;
      break;
    }
  }

  if(id_number != 0)
  { Matched_Id = id_number;
    lcd.setCursor(0, 1);
    if(Matched_Id == 1) lcd.print(" DRIVER 1 MATCH ");
    if(Matched_Id == 2) lcd.print(" DRIVER 2 MATCH ");
    if(Matched_Id == 3) lcd.print("CONDUCTOR1 MATCH");
    if(Matched_Id == 4) lcd.print("CONDUCTOR2 MATCH");
    if(Matched_Id == 5) lcd.print("CHILD ID 1 MATCH");
    if(Matched_Id == 6) lcd.print("CHILD ID 2 MATCH");
    if(Matched_Id == 7) lcd.print("CHILD ID 3 MATCH");
    if(Matched_Id == 8) lcd.print("CHILD ID 4 MATCH");
    delay(2000);
    if((check_attendance == 1)&&(LocationID != 0x06))       in_out = 1;
    if((check_attendance == 1)&&(LocationID == 0x06))       in_out = 0;
    if((check_attendance == 2)&&(LocationID == 0x06))       in_out = 1;
    if((check_attendance == 2)&&(LocationID != 0x06))       in_out = 0;
    if(SEND_DATA())     
    { lcd.setCursor(0, 1);
      lcd.print("  DATA  SENT    ");    
    }
    else              
    { lcd.setCursor(0, 1);
      lcd.print(" DATA NOT SENT  ");    
    }
    delay(3000);
   }
   else
   {  lcd.setCursor(0, 1);
      lcd.print(" USER NOT MATCH ");    
      delay(3000);
   }
    
}

int Fp_register(void)
{ id = readnumber();
//---GET IMAGE--------------
  int p = -1;
  lcd.setCursor(0, 1);
  lcd.print(" PRESS FINGER 1 ");      
  while (p != FINGERPRINT_OK) 
  { p = finger.getImage();
    delay(50);
  }
  // OK success!
//------CONVERT IMAGE-------
  p = finger.image2Tz(1);
//----WAIT FOR REMOVE FINGER
  lcd.setCursor(0, 1);
  lcd.print("REMOVE FINGER 1 ");      
  delay(2000);
  p = 0;
  while (p != FINGERPRINT_NOFINGER) {
    p = finger.getImage();
  }
//-------TAB AGAIN------------------------------
  lcd.setCursor(0, 1);
  lcd.print(" PRESS FINGER 2 ");   
  p = -1;
  while (p != FINGERPRINT_OK) 
  { p = finger.getImage();     
  }
  // OK success! 
//--------------------------------------------------------------------------------
  p = finger.image2Tz(2);
  p = finger.createModel();   
//-------STORE FINGER IMAGE-----------------------------------------------------------  
  p = finger.storeModel(id);
  lcd.setCursor(0, 1);
  lcd.print("RegistrationDone");    
  delay(2000);
}

uint8_t readnumber(void) 
{ uint8_t num = 1;
  
  lcd.setCursor(0, 0);
  lcd.print("SET USER ID     ");      
  lcd.setCursor(0, 1);
  lcd.print("  REGISTRATION  ");
  delay(1000);
  while (1) 
  { lcd.setCursor(12, 0);
    lcd.print("   ");
    lcd.setCursor(12, 0);
    lcd.print(num,DEC); 
    
    if(!digitalRead(KEY_1))        return num;
    if(!digitalRead(KEY_2))        
    {  if(num < MAX_PERSON)     num++;
       else             num = 1;
    }
    if(!digitalRead(KEY_3)) 
    {  if(num > 1)      num--;
       else             num = MAX_PERSON;
    }
    delay(300);
 }
}

//----------Wifi Code-------------------------------------
bool Client_setup(void)
{ AT_RESTORE();
  AT_CWMODE(3);
  AT_CIPMUX();
  if(!AT_CWJAP("Jeet","ganeshaabc123"))
  {   Serial.println("Not Connected to server");
      return false;
  }
  return true;
}

byte SEND_DATA(void)
{ if(!AT_CIPSTART())
  {  return 0;
  }
  if(!AT_CIPSEND())
  {  return 0;
  }
  return 1; 
//  AT_CIPCLOSE();
}

void AT_CIPCLOSE(void)
{ String data = "";
  Serial1.println("AT+CIPCLOSE=1");
  data = readData(1000);
}

bool AT_CIPSTART(void)
{ String data = "";
  bool return_flag = 0;
  Serial1.println("AT+CIPSTART=1,\"TCP\",\"192.168.0.54\",80");
  data = readData(5000);
  return_flag = compare_string(data,(char *)"1,CONNECT",9); 
  return(return_flag);
}
//http://192.168.0.54/1472/child_security/data.php?A=8&B=O&C=3&D=1 
bool AT_CIPSEND(void)
{ String Senddata = "GET /1472/child_security/data.php?A="+String(Matched_Id)+"&B="+String(in_out)+"&C="+String(LocationID)+"&D="+String(check_attendance)+" HTTP/1.1\r\nHost: 192.168.0.54\r\n\r\n";
  int Str_length = Senddata.length();
  String data = "";
  Serial1.print("AT+CIPSEND=1,");
  Serial1.println(Str_length,DEC);
  data = readData(2000);
  if(compare_string(data,(char *)">",1))
  { Serial1.println(Senddata);
    data = readData(10000);
    if(compare_string(data,(char *)"SEND OK",7))
    { return true;
    }
  }
  return false;
}


void GET_NEW_DATA(void)
{ if (Serial1.available() == 0) return;

  String Data = "";
  Data = readData(1000);
  byte temp = 0;
  char str_to_char_buff[50]; 
  Data.toCharArray(str_to_char_buff,50);

  if(compare_string(Data, (char *)"+IPD,",5))
  {   temp =  crnt_match_point;
      if(compare_string(Data, (char *)"APP_",4))
      { App_LinkID = str_to_char_buff[temp];
        AppContDataSending = 1;       
        return;
      }
  }
  if(compare_string(Data, (char *)"CLOSED",6))
  { if(str_to_char_buff[crnt_match_point-8] == App_LinkID)  AppContDataSending = 0;
  }
}

bool Server_setup(void)
{ AT_RESTORE();
  AT_CWMODE(3);
  AT_CIPMUX();
//  if(!AT_CWSAP("MY_WifiServer","1234567890"))  return false;
  if(!AT_CWJAP("hotspot","1234567890"))
  {   Serial.println("Not Connected to server");
      return false;
  }
  if (!AT_CIPSERVER(1234))                     return false;
  return true;
}

bool AT_CWJAP(String ipaddr,String passwrd)
{ String data = "";
  bool return_flag = 0;
  Serial1.print("AT+CWJAP=\"");
  Serial1.print(ipaddr);
  Serial1.print("\",\"");
  Serial1.print(passwrd);
  Serial1.println("\"");
  data = readData(10000);
  if(compare_string(data,(char *)"WIFI DISCONNECT",15)) return(0);
  return_flag = compare_string(data,(char *)"WIFI CONNECTED",14); 
  return(return_flag);
}

bool AT_test(void)
{ String data = "";
  Serial1.println(F("AT"));
  data = readData(1000);
  return(compare_string(data,(char *)"OK",2));
}

void AT_RESTORE(void)
{ Serial1.println(F("AT+RESTORE"));
  readData(5000);
}

void AT_RST(void)
{ Serial1.println(F("AT+RST"));
  readData(1000);
}

void AT_CWMODE(char Mode)
{ Serial1.print(F("AT+CWMODE="));
  Serial1.println(Mode,DEC);
  readData(1000);
}
void AT_CIPMUX(void)
{ String data = "";
  Serial1.println(F("AT+CIPMUX=1"));
  data = readData(1000);
}

bool AT_CWSAP(String My_WifiName,String My_Wifipswd)
{ String data = "";
  Serial1.print(F("AT+CWSAP=\""));
  Serial1.print(My_WifiName);
  Serial1.print(F("\",\""));
  Serial1.print(My_Wifipswd);
  Serial1.println(F("\",5,3"));
  data = readData(5000);
  return (compare_string(data, (char *)"OK", 2));
}

bool AT_CIPSERVER(int port_num)
{ String data = "";
  Serial1.print(F("AT+CIPSERVER=1,"));
  Serial1.println(port_num,DEC);
  data = readData(1000);
  return(compare_string(data,(char *)"OK",2));    
}

bool AT_CIPCLOSE(char linkID)
{ String data = "";
  Serial1.print(F("AT+CIPCLOSE="));
  Serial1.println(linkID);
  data = readData(1000);
  return(compare_string(data,(char *)"OK",2));    
}

bool compare_string(String main_str,char *sub_str,char String2_size)
{ int main_str_length = 0,i = 0;
  main_str_length  = main_str.length();
  while(main_str_length != i)
  { if(main_str.substring(i,i + String2_size) == sub_str)
    { crnt_match_point = i+String2_size;
      return true; 
    }                                              
    i++;
  }
  return false;
}

String readData(unsigned long timeout) 
{   String data = "";
    unsigned long t = millis();
    while(millis() - t < timeout) 
    { if(Serial1.available() > 0) 
      {   char r = Serial1.read();
          data += r;  
          t = millis();
      }
    }
    Serial.println(data);
    return data;
}
